# Production Deployment Configuration for Agent Skeptic Bench
# Supports Docker Compose and Kubernetes deployment

apiVersion: v1
kind: Namespace
metadata:
  name: agent-skeptic-bench
  labels:
    name: agent-skeptic-bench
    environment: production

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-skeptic-bench-api
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: agent-skeptic-bench-api
  template:
    metadata:
      labels:
        app: agent-skeptic-bench-api
        version: v1.0.0
    spec:
      containers:
      - name: api
        image: agent-skeptic-bench:latest
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: QUANTUM_OPTIMIZATION
          value: "true"
        - name: AUTO_SCALING
          value: "true"
        - name: SECURITY_ENHANCED
          value: "true"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: data
          mountPath: /app/data
      volumes:
      - name: config
        configMap:
          name: agent-skeptic-bench-config
      - name: data
        persistentVolumeClaim:
          claimName: agent-skeptic-bench-data

---
apiVersion: v1
kind: Service
metadata:
  name: agent-skeptic-bench-service
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench-api
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: agent-skeptic-bench-api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-skeptic-bench-config
  namespace: agent-skeptic-bench
data:
  config.yaml: |
    # Agent Skeptic Bench Production Configuration
    
    # API Configuration
    api:
      host: "0.0.0.0"
      port: 8000
      workers: 4
      timeout: 300
      max_request_size: "10MB"
    
    # Quantum Optimization
    quantum:
      enabled: true
      population_size: 50
      max_iterations: 100
      convergence_threshold: 1e-6
      coherence_threshold: 0.8
    
    # Security Configuration
    security:
      enabled: true
      rate_limits:
        requests_per_minute: 100
        requests_per_hour: 1000
        requests_per_day: 10000
      threat_detection:
        enabled: true
        sensitivity: 0.7
      input_validation:
        max_length: 10000
        sanitize: true
    
    # Monitoring Configuration
    monitoring:
      enabled: true
      prometheus_port: 9090
      collection_interval: 10
      retention_hours: 24
      alerts:
        cpu_threshold: 80.0
        memory_threshold: 85.0
        response_time_threshold: 2000.0
    
    # Auto-scaling Configuration
    auto_scaling:
      enabled: true
      strategy: "quantum_optimized"
      min_workers: 2
      max_workers: 20
      scale_up_threshold: 0.7
      scale_down_threshold: 0.3
      cooldown_seconds: 60
    
    # Database Configuration
    database:
      url: "postgresql://user:password@postgres:5432/agent_skeptic_bench"
      pool_size: 10
      max_overflow: 20
      pool_timeout: 30
    
    # Cache Configuration
    cache:
      type: "redis"
      url: "redis://redis:6379/0"
      ttl: 3600
      max_connections: 10
    
    # Logging Configuration
    logging:
      level: "INFO"
      format: "json"
      output: "stdout"
      rotation: "daily"
      retention: "30 days"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: agent-skeptic-bench-data
  namespace: agent-skeptic-bench
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-skeptic-bench-hpa
  namespace: agent-skeptic-bench
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agent-skeptic-bench-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: agent-skeptic-bench
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: agent_skeptic_bench
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: agent-skeptic-bench
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: agent-skeptic-bench
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: agent-skeptic-bench
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: agent-skeptic-bench
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
# Prometheus Monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: agent-skeptic-bench
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: agent-skeptic-bench
spec:
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: agent-skeptic-bench
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    
    scrape_configs:
    - job_name: 'agent-skeptic-bench'
      static_configs:
      - targets: ['agent-skeptic-bench-service:9090']
      scrape_interval: 10s
      metrics_path: /metrics
    
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - agent-skeptic-bench
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)

---
# Grafana Dashboard
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: agent-skeptic-bench
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana/provisioning
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: grafana-data
        emptyDir: {}
      - name: grafana-config
        configMap:
          name: grafana-config

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: agent-skeptic-bench
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: agent-skeptic-bench
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true
  
  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: agent-skeptic-bench
type: Opaque
data:
  username: YWdlbnRfc2tlcHRpY191c2Vy  # agent_skeptic_user (base64)
  password: c2VjdXJlX3Bhc3N3b3JkXzEyMw==  # secure_password_123 (base64)

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: agent-skeptic-bench
type: Opaque
data:
  admin-password: YWRtaW5fcGFzc3dvcmRfMTIz  # admin_password_123 (base64)

---
# Network Policies for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agent-skeptic-bench-netpol
  namespace: agent-skeptic-bench
spec:
  podSelector:
    matchLabels:
      app: agent-skeptic-bench-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

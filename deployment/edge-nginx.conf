worker_processes auto;
worker_cpu_affinity auto;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format edge_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" '
                          'uht="$upstream_header_time" urt="$upstream_response_time" '
                          'edge_region="$edge_region" quantum_coherence="$quantum_coherence"';
    
    access_log /var/log/nginx/access.log edge_format;
    error_log /var/log/nginx/error.log warn;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting for edge nodes
    limit_req_zone $binary_remote_addr zone=edge_limit:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
    
    # Quantum-weighted upstream selection
    upstream edge_evaluators {
        least_conn;
        
        # Primary edge evaluators with quantum weights
        server edge-evaluator:8080 weight=10 max_fails=3 fail_timeout=30s;
        
        # Health check
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream edge_coordinators {
        least_conn;
        
        server edge-coordinator:9080 weight=5 max_fails=2 fail_timeout=30s;
        
        keepalive 16;
    }
    
    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;
        
        # Edge region header
        add_header X-Edge-Region "${EDGE_REGION:-us-east-1}" always;
        add_header X-Edge-Node "${HOSTNAME}" always;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API endpoints with quantum load balancing
        location /api/ {
            limit_req zone=api_limit burst=10 nodelay;
            
            # Quantum-enhanced routing
            set $edge_region "${EDGE_REGION:-us-east-1}";
            set $quantum_coherence "$http_x_quantum_coherence";
            
            proxy_pass http://edge_evaluators;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Edge-Region $edge_region;
            proxy_set_header X-Quantum-Coherence $quantum_coherence;
            
            # Timeouts optimized for edge
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffering for performance
            proxy_buffering on;
            proxy_buffer_size 64k;
            proxy_buffers 8 64k;
            proxy_busy_buffers_size 128k;
            proxy_temp_file_write_size 128k;
        }
        
        # Federation endpoints
        location /federation/ {
            limit_req zone=edge_limit burst=5 nodelay;
            
            proxy_pass http://edge_coordinators;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Edge-Region "${EDGE_REGION:-us-east-1}";
            
            # Longer timeouts for federation
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # Static assets with edge caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Edge-Cache "HIT";
        }
        
        # Edge dashboard
        location /dashboard/ {
            proxy_pass http://edge-dashboard:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Security endpoints
        location /security/ {
            limit_req zone=api_limit burst=5 nodelay;
            
            proxy_pass http://edge-security:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Metrics endpoint (internal only)
        location /metrics {
            allow 172.21.0.0/16;
            allow 10.1.0.0/16;
            deny all;
            
            proxy_pass http://edge-gateway:8080/metrics;
        }
        
        # Default deny
        location / {
            return 404 "Not Found";
        }
    }
    
    # HTTPS server (if SSL certificates are available)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;
        
        # SSL configuration
        ssl_certificate /etc/nginx/ssl/edge.crt;
        ssl_certificate_key /etc/nginx/ssl/edge.key;
        ssl_session_cache shared:SSL:50m;
        ssl_session_timeout 1h;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # Same configuration as HTTP server
        include /etc/nginx/conf.d/edge-common.conf;
    }
}
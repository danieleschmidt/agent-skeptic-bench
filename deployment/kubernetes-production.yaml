apiVersion: v1
kind: Namespace
metadata:
  name: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: agent-skeptic-bench
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  GLOBAL_DEPLOYMENT: "true"
  COMPLIANCE_FRAMEWORKS: "gdpr,ccpa,pdpa"
  SUPPORTED_LANGUAGES: "en,es,fr,de,ja,zh"
  REDIS_URL: "redis://redis-service:6379"
  DATABASE_URL: "postgresql://skeptic:$(DB_PASSWORD)@postgres-service:5432/skeptic_bench"
  PROMETHEUS_ENDPOINT: "http://prometheus-service:9090"
  JAEGER_ENDPOINT: "http://jaeger-service:14268/api/traces"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: agent-skeptic-bench
type: Opaque
data:
  DB_PASSWORD: c2tlcHRpY19wYXNzd29yZA==  # skeptic_password (base64)
  GRAFANA_PASSWORD: YWRtaW5fcGFzc3dvcmQ=     # admin_password (base64)
  JWT_SECRET: and0X3NlY3JldF9rZXlfMTIz       # jwt_secret_key_123 (base64)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-skeptic-bench
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: agent-skeptic-bench
      component: api
  template:
    metadata:
      labels:
        app: agent-skeptic-bench
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: agent-skeptic-bench
        image: agent-skeptic-bench:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: metrics
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: JWT_SECRET
        envFrom:
        - configMapRef:
            name: app-config
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: app-config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: app-config-volume
        configMap:
          name: app-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - agent-skeptic-bench
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-worker
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench
    component: quantum-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-skeptic-bench
      component: quantum-worker
  template:
    metadata:
      labels:
        app: agent-skeptic-bench
        component: quantum-worker
    spec:
      containers:
      - name: quantum-worker
        image: agent-skeptic-bench:quantum-worker
        imagePullPolicy: Always
        env:
        - name: WORKER_TYPE
          value: "quantum_optimization"
        - name: QUANTUM_POPULATION_SIZE
          value: "50"
        - name: QUANTUM_MAX_ITERATIONS
          value: "100"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        envFrom:
        - configMapRef:
            name: app-config
        resources:
          requests:
            cpu: 2000m
            memory: 2Gi
          limits:
            cpu: 4000m
            memory: 4Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: research-worker
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench
    component: research-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-skeptic-bench
      component: research-worker
  template:
    metadata:
      labels:
        app: agent-skeptic-bench
        component: research-worker
    spec:
      containers:
      - name: research-worker
        image: agent-skeptic-bench:research-worker
        imagePullPolicy: Always
        env:
        - name: WORKER_TYPE
          value: "research_analytics"
        - name: EXPERIMENT_BATCH_SIZE
          value: "100"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        envFrom:
        - configMapRef:
            name: app-config
        resources:
          requests:
            cpu: 1000m
            memory: 1500Mi
          limits:
            cpu: 2000m
            memory: 3Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: agent-skeptic-bench
  labels:
    app: postgres
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "skeptic_bench"
        - name: POSTGRES_USER
          value: "skeptic"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            cpu: 1000m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - skeptic
            - -d
            - skeptic_bench
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - skeptic
            - -d
            - skeptic_bench
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 100Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: agent-skeptic-bench
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "1gb"
        - --maxmemory-policy
        - "allkeys-lru"
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: agent-skeptic-bench
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: "fast-ssd"
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: agent-skeptic-bench-service
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: metrics
  selector:
    app: agent-skeptic-bench
    component: api
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: agent-skeptic-bench
  labels:
    app: postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: agent-skeptic-bench
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agent-skeptic-bench-ingress
  namespace: agent-skeptic-bench
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
spec:
  tls:
  - hosts:
    - api.agent-skeptic-bench.com
    secretName: agent-skeptic-bench-tls
  rules:
  - host: api.agent-skeptic-bench.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agent-skeptic-bench-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-skeptic-bench-hpa
  namespace: agent-skeptic-bench
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agent-skeptic-bench
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: agent-skeptic-bench-pdb
  namespace: agent-skeptic-bench
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: agent-skeptic-bench
      component: api
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: agent-skeptic-bench-metrics
  namespace: agent-skeptic-bench
  labels:
    app: agent-skeptic-bench
spec:
  selector:
    matchLabels:
      app: agent-skeptic-bench
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agent-skeptic-bench-netpol
  namespace: agent-skeptic-bench
spec:
  podSelector:
    matchLabels:
      app: agent-skeptic-bench
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow all outbound for external APIs
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80